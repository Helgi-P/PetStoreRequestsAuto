{"uid":"5a8da91614d95fd1","name":"test_upload_pet_image_sizes_statuses[img_size3-400]","fullName":"test_PetStoreRequests#test_upload_pet_image_sizes_statuses","historyId":"92ef748c8cac06c94d34f79ca6a69d67","time":{"start":1724411970179,"stop":1724411970478,"duration":299},"status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"base_url = 'https://petstore.swagger.io/v2', pet_id = 123454321\nimg_size = (0, 0), expected_status = 400\n\n    @pytest.mark.parametrize(\"img_size, expected_status\", [\n        ((256, 512), 200),\n        ((512, 1024), 200),\n        ((1, 1), 200),\n        ((0, 0), 400)\n    ])\n    def test_upload_pet_image_sizes_statuses(base_url, pet_id, img_size, expected_status):\n        def upload_image(file, metadata):\n            return requests.post(\n                f'{base_url}/pet/{pet_id}/uploadImage',\n                data={'additionalMetadata': metadata},\n                files={'file': file}\n            )\n    \n        if img_size == (0, 0):\n            response = upload_image(('empty.png', b'', 'image/png'), 'Testing with (0, 0) image')\n            print('\\nAttempted upload with image size (0, 0)')\n    \n        elif img_size == (1, 1):\n            response = upload_image(('small.png', b'', 'image/png'), 'Testing with (1, 1) image')\n            print('\\nAttempted upload with image size (1, 1)')\n    \n        else:\n            img = get_random_image(img_size)\n            img = (img * 255).astype(np.uint8)\n            additional_metadata = 'Random image upload'\n    \n            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_image_file:\n                image_path = temp_image_file.name\n                Image.fromarray(img).save(image_path)\n    \n            with open(image_path, 'rb') as file:\n                response = upload_image(file, additional_metadata)\n    \n            print(f'\\nUpload pet image with size {img_size}')\n    \n        print('\\nUpload pet image: image size & status code')\n        print('Text: ' + response.text)\n        print('Status: ' + str(response.status_code))\n>       assert response.status_code == expected_status\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest_PetStoreRequests.py:100: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1724411933890,"stop":1724411933890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pet_id","time":{"start":1724411933891,"stop":1724411933891,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1724411933891,"stop":1724411934331,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"data","time":{"start":1724411933891,"stop":1724411933891,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"update_pet_data","time":{"start":1724411934331,"stop":1724411934331,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"base_url = 'https://petstore.swagger.io/v2', pet_id = 123454321\nimg_size = (0, 0), expected_status = 400\n\n    @pytest.mark.parametrize(\"img_size, expected_status\", [\n        ((256, 512), 200),\n        ((512, 1024), 200),\n        ((1, 1), 200),\n        ((0, 0), 400)\n    ])\n    def test_upload_pet_image_sizes_statuses(base_url, pet_id, img_size, expected_status):\n        def upload_image(file, metadata):\n            return requests.post(\n                f'{base_url}/pet/{pet_id}/uploadImage',\n                data={'additionalMetadata': metadata},\n                files={'file': file}\n            )\n    \n        if img_size == (0, 0):\n            response = upload_image(('empty.png', b'', 'image/png'), 'Testing with (0, 0) image')\n            print('\\nAttempted upload with image size (0, 0)')\n    \n        elif img_size == (1, 1):\n            response = upload_image(('small.png', b'', 'image/png'), 'Testing with (1, 1) image')\n            print('\\nAttempted upload with image size (1, 1)')\n    \n        else:\n            img = get_random_image(img_size)\n            img = (img * 255).astype(np.uint8)\n            additional_metadata = 'Random image upload'\n    \n            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_image_file:\n                image_path = temp_image_file.name\n                Image.fromarray(img).save(image_path)\n    \n            with open(image_path, 'rb') as file:\n                response = upload_image(file, additional_metadata)\n    \n            print(f'\\nUpload pet image with size {img_size}')\n    \n        print('\\nUpload pet image: image size & status code')\n        print('Text: ' + response.text)\n        print('Status: ' + str(response.status_code))\n>       assert response.status_code == expected_status\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest_PetStoreRequests.py:100: AssertionError","steps":[],"attachments":[{"uid":"bf8000009a2062f3","name":"stdout","source":"bf8000009a2062f3.txt","type":"text/plain","size":230}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1724411971124,"stop":1724411971428,"duration":304},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"test_PetStoreRequests"},{"name":"host","value":"fv-az1429-332"},{"name":"thread","value":"2134-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_PetStoreRequests"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"400"},{"name":"img_size","value":"(0, 0)"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"e5e1bd60c271cd34","reportUrl":"https://Helgi-P.github.io/PetStoreRequestsAuto/6//#testresult/e5e1bd60c271cd34","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1724398515414,"stop":1724398515705,"duration":291}},{"uid":"129b08f2a4317037","reportUrl":"https://Helgi-P.github.io/PetStoreRequestsAuto/5//#testresult/129b08f2a4317037","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1724346262574,"stop":1724346262688,"duration":114}},{"uid":"db6c06c24602ed3f","reportUrl":"https://Helgi-P.github.io/PetStoreRequestsAuto/4//#testresult/db6c06c24602ed3f","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1724345763491,"stop":1724345763546,"duration":55}},{"uid":"6407f72cd1c4a2f9","reportUrl":"https://Helgi-P.github.io/PetStoreRequestsAuto/3//#testresult/6407f72cd1c4a2f9","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1724345518919,"stop":1724345518969,"duration":50}},{"uid":"6be8a963716353db","reportUrl":"https://Helgi-P.github.io/PetStoreRequestsAuto/2//#testresult/6be8a963716353db","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1724344945796,"stop":1724344946099,"duration":303}}]},"tags":[]},"source":"5a8da91614d95fd1.json","parameterValues":["400","(0, 0)"]}